{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["hasUpdate","update","includes","PostList","props","posts","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","date","bDate","throttleScrollHandler","useCallback","throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","map","post","fields","slug","title","description","tags","mapTag","tag","key","className","to","useEffect","slice","addEventListener","removeEventListener","pageQuery","Tags","data","location","group","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","Number","opacity","fontWeight","onClick","href","getPostList","filter","edges","hash","decodeURIComponent","split","large","pathname","id"],"mappings":"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","file":"component---src-pages-tags-tsx-bf5a55cbc5da74c321e5.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport throttle from 'lodash/throttle';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(hasUpdate(af.update) ? af.update : af.date);\n      const bDate = new Date(hasUpdate(bf.update) ? bf.update : bf.date);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight >\n        (document.querySelector(\n          '.post-list'\n        ) as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const { node } = post;\n      const { fields, frontmatter } = node;\n      const { slug } = fields;\n      const { date, title, description, tags } = frontmatter;\n      let { update } = frontmatter\n\n      if (!hasUpdate(update)) {\n        update = null;\n      }\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h1>\n              <Link to={slug}>{title}</Link>\n            </h1>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {update ? (\n                  <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span>\n                ) : null}\n              </div>\n              {tags.length && tags[0] !== 'undefined' ? (\n                <span className=\"info-dot\">Â·</span>\n              ) : null}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug} className=\"excerpt\">\n              <p>{description}</p>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10)\n      expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nfunction hasUpdate(update: string) {\n  return !update.includes('0001');\n}\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n  location: { pathname: string; hash: string };\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data, location } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState<string | undefined>();\n  const [currentPostList, setCurrentPostList] = useState([]);\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0]\n        .edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0]\n        .edges;\n    }\n    return [];\n  }, [targetTag]);\n\n  useEffect(() => {\n    setTargetTag(\n      location?.hash\n        ? decodeURIComponent(location.hash.split('#')[1])\n        : 'undefined'\n    );\n\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large)\n        large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, []);\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList());\n  }, [targetTag]);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" description=\"ð·...\" pathname={location.pathname} />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"YYYY-MM-DD\")\n              description\n              update(formatString: \"YYYY-MM-DD\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}