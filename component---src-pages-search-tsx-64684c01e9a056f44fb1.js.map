{"version":3,"sources":["webpack:///./src/pages/search.tsx"],"names":["pageQuery","Search","props","data","location","posts","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","includes","description","pathname","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length"],"mappings":"mHAAA,6HAyFaA,GAzFb,UAyFyB,cAsBVC,UA7FA,SAACC,GAAuB,IAC7BC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SACRC,EAAQF,EAAKG,kBAAkBC,MAFA,EAIXC,mBAAS,IAA5BC,EAJ8B,KAIvBC,EAJuB,OAKCF,oBAAS,GAAxCG,EAL8B,KAKjBC,EALiB,KAO/BC,EAAuBR,EAAMS,QAAO,SAACC,GAAc,IAC/CC,EAASD,EAATC,KACAC,EAAiCD,EAAjCC,YAAaC,EAAoBF,EAApBE,gBACbC,EAAUF,EAAVE,MACFC,EAAaX,EAAMY,oBAEzB,QACGV,IACDO,EAAgBG,oBAAoBC,SAASF,KAIxCD,EAAME,oBAAoBC,SAASF,MAG5C,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKD,MAAM,SAASI,YAAY,QAAQC,SAAUpB,EAASoB,WAC3D,uBAAKC,GAAG,UACN,uBAAKC,UAAU,qBACb,uBAAKA,UAAU,cACb,gBAAC,IAAD,CAAIC,KAAMC,MACV,yBACEC,KAAK,OACLC,KAAK,SACLL,GAAG,cACHhB,MAAOA,EACPsB,YAAY,SACZC,aAAa,MACbC,WAAS,EACTC,SAAU,SAACC,GACTzB,EAASyB,EAAEC,cAAc3B,UAG7B,uBAAKiB,UAAU,iBACb,wBACEW,MAAO,CAAEC,QAAS3B,EAAc,GAAM,KACtC4B,QAAS,WACP3B,GAAe,KAHnB,YAQA,wBACEyB,MAAO,CAAEC,QAAU3B,EAAoB,IAAN,IACjC4B,QAAS,WACP3B,GAAe,KAHnB,sBAWO,KAAVH,GAAiBI,EAAc2B,OAE5B,KADF,wBAAMd,UAAU,aAAhB,qBAEF,gBAAC,IAAD,CAAUrB,MAAiB,KAAVI,EAAeJ,EAAQQ","file":"component---src-pages-search-tsx-64684c01e9a056f44fb1.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n  location: { pathname: string };\n}\n\nconst Search = (props: SearchProps) => {\n  const { data, location } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts: any[] = posts.filter((post: any) => {\n    const { node } = post;\n    const { frontmatter, rawMarkdownBody } = node;\n    const { title } = frontmatter;\n    const lowerValue = value.toLocaleLowerCase();\n\n    if (\n      !isTitleOnly &&\n      rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)\n    )\n      return true;\n\n    return title.toLocaleLowerCase().includes(lowerValue);\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" description=\"ðŸ”Ž...\" pathname={location.pathname} />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? (\n            <span className=\"no-result\">No search results</span>\n          ) : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            description\n            title\n            tags\n            update(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n"],"sourceRoot":""}