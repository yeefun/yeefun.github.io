{"version":3,"sources":["webpack:///./src/pages/tags.tsx"],"names":["pageQuery","Tags","props","data","location","group","allMarkdownRemark","useState","largeCount","setLargeCount","targetTag","setTargetTag","sort","a","b","x","fieldValue","toLocaleLowerCase","y","tagList","map","g","fontSize","key","className","style","Math","round","totalCount","toString","length","Number","opacity","fontWeight","onClick","href","useEffect","large","hash","tagName","decodeURIComponent","split","title","description","pathname","id","posts","filter","edges"],"mappings":"mpCAgBA,IA8FaA,EAAY,YAyBVC,UAvHF,SAACC,GAAyB,IAC7BC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SACNC,EAAUF,EAAKG,kBAAfD,MAF6B,EAIDE,mBAAS,GAAtCC,EAJ8B,KAIlBC,EAJkB,OAKHF,mBAAS,aAApCG,EAL8B,KAKnBC,EALmB,KAYrCN,EAAMO,MAAK,SAACC,EAAcC,GACxB,IAAMC,EAAIF,EAAEG,WAAWC,oBACjBC,EAAIJ,EAAEE,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAGT,IAAMI,EAAiBd,EAAMe,KAAI,SAACC,GAChC,IACMC,EAKN,OACE,sBAAIC,IAAKF,EAAEL,YACT,wBACEQ,UAAU,WACVC,MAAO,CACLH,SAA2B,cAAjBD,EAAEL,YAVdM,EAAWI,KAAKC,MAAM,IAAMnB,EAAaa,EAAEO,aAAaC,WACxDP,EAASQ,QAAU,IAAGR,EAAW,IAAIA,GAC/BS,OAAOT,GAAY,IAAM,GAAnC,OAQ+D,SACzDU,QAASX,EAAEL,aAAeN,EAAY,MAAQ,MAC9CuB,WAAYZ,EAAEL,aAAeN,EAAY,OAAS,UAEpDwB,QAAS,WACPvB,EAAaU,EAAEL,cAGjB,qBAAGmB,KAAI,IAAMd,EAAEL,YAAeK,EAAEL,iBAMxCG,EAAQP,MAAK,SAACC,GACZ,MAAc,cAAVA,EAAEU,KAA6B,EAC5B,KA+BT,OAhBAa,qBAAU,WAER,IADA,IACA,EADIC,EAAQ,EACZ,IAAgBhC,KAAhB,aAAuB,KAAZgB,EAAY,QACA,cAAjBA,EAAEL,YAA8BK,EAAEO,WAAaS,IACjDA,EAAQhB,EAAEO,YAEdnB,EAAc4B,KACb,CAAChC,IAEJ+B,qBAAU,WACR,GAAIhC,EAASkC,KAAM,CACjB,IAAMC,EAAUC,mBAAmBpC,EAASkC,KAAKG,MAAM,KAAK,IAC5D9B,EAAa4B,OAKf,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKG,MAAM,OAAOC,YAAY,QAAQC,SAAUxC,EAASwC,WACzD,uBAAKC,GAAG,QACN,uBAAKrB,UAAU,iBACb,0BAAKL,IAGP,gBAAC,IAAD,CAAU2B,MAnCVzC,EAAM0C,QAAO,SAAC1B,GAAD,OAAkBA,EAAEL,aAAeN,KAAWoB,OACtDzB,EAAM0C,QAAO,SAAC1B,GAAD,OAAkBA,EAAEL,aAAeN,KAAW,GAC/DsC,MAED3C,EAAM0C,QAAO,SAAC1B,GAAD,MAAmC,cAAjBA,EAAEL,cAA4Bc,OACxDzB,EAAM0C,QAAO,SAAC1B,GAAD,MAAmC,cAAjBA,EAAEL,cAA4B,GACjEgC,MAEE","file":"component---src-pages-tags-tsx-c526cc56f6ad1fb5f55d.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n  location: { pathname: string; hash: string };\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data, location } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState('undefined');\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList: any[] = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  tagList.sort((a: React.ReactElement) => {\n    if (a.key === 'undefined') return -1;\n    return 0;\n  });\n\n  const getPostList: () => any[] = () => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0]\n        .edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0]\n        .edges;\n    }\n    return [];\n  };\n\n  useEffect(() => {\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large)\n        large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, [group]);\n\n  useEffect(() => {\n    if (location.hash) {\n      const tagName = decodeURIComponent(location.hash.split('#')[1]);\n      setTargetTag(tagName);\n    }\n  });\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" description=\"🏷...\" pathname={location.pathname} />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={getPostList()} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"YYYY-MM-DD\")\n              description\n              update(formatString: \"YYYY-MM-DD\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}