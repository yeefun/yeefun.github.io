{"componentChunkName":"component---src-templates-post-tsx","path":"/how-to-determine-the-variable-declaration-keyword/","result":{"data":{"markdownRemark":{"html":"<p>大家平時都是怎麼決定該用哪個關鍵字（<code class=\"language-text\">var</code>、<code class=\"language-text\">let</code>、<code class=\"language-text\">const</code>）宣告變數的呢？受到 <a href=\"https://eslint.org/docs/rules/no-var\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESlint 建議規範</a>的影響，我猜很多人跟我一樣，決定方式很簡單：會被再賦值（reassign）的就用 <code class=\"language-text\">let</code>，不會的就用 <code class=\"language-text\">const</code>。<code class=\"language-text\">var</code> 完全不在我們的選項內，畢竟，<code class=\"language-text\">var</code> 有很多缺點，它的好處完全可以由 <code class=\"language-text\">let</code> 來代替，是吧？</p>\n<p>我承認我並沒有很認真探討過這個問題，只是跟著 ESlint 規範走，直到在讀書會看了頗有名氣的 <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">You Don't Know JS Yet: Scope &#x26; Closures</a>（是的，它出第二版了），發現作者 Kyle Simpson 並不派斥 <code class=\"language-text\">var</code>，<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/apA.md#the-case-for-var\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">甚至認為 <code class=\"language-text\">var</code> 的好處無法取代</a>，這才讓我重新思考並質疑自己不使用 <code class=\"language-text\">var</code> 的理由。</p>\n<h2 id=\"var-很有用\" style=\"position:relative;\"><a href=\"#var-%E5%BE%88%E6%9C%89%E7%94%A8\" aria-label=\"var 很有用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">var</code> 很有用</h2>\n<p>Simpson 認為，<code class=\"language-text\">var</code> 跟 <code class=\"language-text\">let</code> 都很有用（他沒有很喜歡 <code class=\"language-text\">const</code>，後面會說原因）。前者為函數作用域（function scope），後者為區塊作用域（block scope），因此，當一個變數在整個函數中都會用到，那就該用 <code class=\"language-text\">var</code>，並宣告在<strong>函數最外層</strong>（top-level，也可以說是頂層）；反之，如果一個變數只會在函數中的某個區塊用到，那就該用 <code class=\"language-text\">let</code>，並宣告在<strong>這個區塊內</strong>，讓外層的作用域取用不到。</p>\n<p>比方說，假如我現在要寫一個能判斷使用者網頁捲動方向的函數，按照 ESlint 建議的寫法，會是這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logScrollDirection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> beforeScrollY <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">;</span>\n  \n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentScrollY <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> currentScrollY <span class=\"token operator\">-</span> beforeScrollY<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll down!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll up!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    beforeScrollY <span class=\"token operator\">=</span> currentScrollY<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但 Simpson 會建議這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logScrollDirection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 變成 `var` 了</span>\n  <span class=\"token keyword\">var</span> beforeScrollY <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">;</span>\n  \n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 變成 `var` 了</span>\n    <span class=\"token keyword\">var</span> currentScrollY <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 多了大括號</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span></span>      <span class=\"token comment\">// 變成 `let` 了</span>\n      <span class=\"token keyword\">let</span> delta <span class=\"token operator\">=</span> currentScrollY <span class=\"token operator\">-</span> beforeScrollY<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll down!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll up!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    beforeScrollY <span class=\"token operator\">=</span> currentScrollY<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你可能會想說，<code class=\"language-text\">let</code> 其實也是函數作用域，為什麼不乾脆把上面的 <code class=\"language-text\">var</code> 都改成 <code class=\"language-text\">let</code> 呢？</p>\n<p>理由有兩個：第一，就語義上來說，<code class=\"language-text\">var</code> 比 <code class=\"language-text\">let</code> 更適合扮演「這個變數是作用在整個函數中」的角色，畢竟在 <code class=\"language-text\">let</code> 還未出現前的 20 年，<code class=\"language-text\">var</code> 就一直都是如此。</p>\n<p>第二，如果你在任何地方都使用 <code class=\"language-text\">let</code>，那你可能會不好判斷這個 <code class=\"language-text\">let</code> 所宣告的變數是作用在整個函數中，還是只在某個區塊內。</p>\n<p>你可能還會注意到，在黃線處有個奇怪的大括號 <code class=\"language-text\">{..}</code>。這個括號能確保 <code class=\"language-text\">delta</code> 不被函數內的其它地方取用到，讓它成為名副其實的區塊變數。</p>\n<p>一般來說，我們在函數內創建區塊變數，是在遇到 <code class=\"language-text\">if..else</code> 或 <code class=\"language-text\">for</code> 迴圈的時候。但其實你可以不靠這些陳述語句（statement）來創建區塊變數，那就是直接用單獨的 <code class=\"language-text\">{..}</code> 大括號。</p>\n<p>這個大括號看來有點奇怪又累贅，但它事實上是讓 <code class=\"language-text\">var</code> 與 <code class=\"language-text\">let</code> 的搭配發揮最大效用的關鍵，而且它還體現了軟體工程的一個原則：最小暴露原則（The Principle of Least Exposure, POLE）。</p>\n<h2 id=\"最小暴露原則\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%B0%8F%E6%9A%B4%E9%9C%B2%E5%8E%9F%E5%89%87\" aria-label=\"最小暴露原則 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最小暴露原則</h2>\n<p>最小暴露原則與<a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">最小權限原則（The Principle of Least Privilege, POLP）</a>有關，但它關注的層次較低。就變數而言，它想最小化暴露的是其<strong>作用域</strong>。</p>\n<p>為什麼？想想一個極端的問題：為什麼我們不把所有變數都宣告在全局作用域（global scope）？命名衝突、被他人非預期或惡意修改、非意圖依賴導致重構困難（詳細說明可見<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch6.md#least-exposure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>）——當我們把區域（local）變數非必要地暴露給程式其它部分使用時，這三個危險便會浮現，在日後絆你一跤。</p>\n<p>因此，我們應遵守最小暴露原則，<strong>這意味著我們應盡可能地保持變數私有（private），也就是將變數宣告在盡可能深的嵌套作用域內</strong>。</p>\n<p>說來容易，但這其實並不是一個很直覺的作法。我常需要在寫完函數的內容後，再回過頭來重新檢視程式碼，以找出哪些變數是函數中的區域變數（或甚至是區塊中的區域變數），再用 <code class=\"language-text\">{..}</code> 括起來。</p>\n<p>聽來有點麻煩，但這種作法不僅能避免上述危險，還意外地擁有兩個好處。</p>\n<p>第一個是當你不小心寫出一個肥大的函數，<code class=\"language-text\">{..}</code> 有助於你判斷哪些程式碼是彼此相關，從而讓你更容易理解整個函數在幹嘛。</p>\n<p>當然，我們應盡可能避免寫出這樣的函數，但即使寫出來了，當我們在重構（refactoring）時，也可以相對容易判斷出哪些區塊可以<a href=\"https://refactoring.com/catalog/extractFunction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提取成函數</a>，以提升可讀性（readability）。</p>\n<p>同時，提取函數的過程也變得容易，因為你可以很快地判斷出變數的來源，知道現在要提取的區塊裡有哪些全局變數和區域變數，比如下面這段程式碼（請想像它是一個內容很長的函數）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**</span>\n<span class=\"token comment\"> * 此處範例借用自 Martin Fowler 的著作 Refactoring: Improving the Design of Existing Code (2nd Edition)</span>\n<span class=\"token comment\"> * 第六章 Extract Fucntion 一節的程式碼</span>\n<span class=\"token comment\"> */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printOwing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outstanding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> order <span class=\"token keyword\">of</span> invoice<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    outstanding <span class=\"token operator\">+=</span> order<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  invoice<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> outstanding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假設你想重構被黃線劃起來的區塊，把它提取成一個名為 <code class=\"language-text\">recordDueDate</code> 的函數，但由於你不知道 <code class=\"language-text\">today</code> 這個變數還有在這個函數中的哪個地方用到，因此你必須一行一行檢查，還必須進到內嵌函數去看有無使用到 <code class=\"language-text\">today</code>，相當麻煩。</p>\n<p>如果現在程式碼變成這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printOwing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">invoice</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outstanding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> order <span class=\"token keyword\">of</span> invoice<span class=\"token punctuation\">.</span>orders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    outstanding <span class=\"token operator\">+=</span> order<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    invoice<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>today<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  \n  <span class=\"token comment\">// ...</span>\n  \n  <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span>invoice<span class=\"token punctuation\">,</span> outstanding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">printDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>清楚多了吧！現在你可以很篤定 <code class=\"language-text\">today</code> 絕對不會被這個區塊以外的地方用到，你可以放心又快速地把這兩行程式碼提取成 <code class=\"language-text\">recordDueDate</code> 函數了。</p>\n<h2 id=\"取捨：評估-var-的缺點\" style=\"position:relative;\"><a href=\"#%E5%8F%96%E6%8D%A8%EF%BC%9A%E8%A9%95%E4%BC%B0-var-%E7%9A%84%E7%BC%BA%E9%BB%9E\" aria-label=\"取捨：評估 var 的缺點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>取捨：評估 <code class=\"language-text\">var</code> 的缺點</h2>\n<p>前面說了 <code class=\"language-text\">var</code> 的優點以及它該怎麼跟 <code class=\"language-text\">let</code> 搭配，這裡來談談 <code class=\"language-text\">var</code> 的缺點。</p>\n<p>先從建議禁用 <code class=\"language-text\">var</code> 的 ESlint 看起。為什麼不用 <code class=\"language-text\">var</code>？<a href=\"https://eslint.org/docs/rules/no-var\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESlint 文件說</a>，因為在<strong>區塊中</strong>宣告 <code class=\"language-text\">var</code> 可能會意外地改變其外同名的變數。注意「區塊中」這三個字。沒錯，這點與前幾節所述原則相符，<code class=\"language-text\">var</code> 的確不應該宣告在區塊內，那是 <code class=\"language-text\">let</code> 發揮作用的地方。因此，前述原則已避免掉了這個缺點（Simpson 在<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/apA.md#the-case-for-var\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇</a>講述了他覺得可以在區塊內宣告 <code class=\"language-text\">var</code> 的狀況，雖然我仍覺得宣告在外頭比較好，但值得看看）。</p>\n<p>再來，應該就是所謂重新宣告（redeclare）的問題。<code class=\"language-text\">let</code> 跟 <code class=\"language-text\">const</code> 將重新宣告的問題澈底消除。但，重新宣告真的是一個嚴重的問題嗎？更確切地問，這個缺點有辦法抵銷甚至壓過前述 <code class=\"language-text\">var</code> 的優點嗎？</p>\n<p>至少我自己是幾乎沒有碰過重新宣告的問題。即便你的函數都寫得很長，但當你很有意識地在區分變數的作用域範圍時，要出錯的機率可說是微乎其微。如果你真的很擔心程式壞掉，那你可以將所有用 <code class=\"language-text\">var</code> 宣告的變數都寫在最上面，總不會在這短短幾行中也有同名的問題吧？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doBigThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token string\">'watch movies'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> second <span class=\"token operator\">=</span> <span class=\"token string\">'shopping'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> third <span class=\"token operator\">=</span> <span class=\"token string\">'sleep'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- 哦哦抓到了，太明顯了吧！</span>\n\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同樣地，重新賦值的問題也是如此。想想看，你會在什麼情況下，不小心將一個不該被重新賦值的變數重新賦值？這種情況多嗎？而且，即便你真的不小心犯錯了，會很難察覺嗎？會很難追蹤嗎？會很難改回來嗎？</p>\n<p>我認為這兩個缺點並不足以說服我放棄前面所說的宣告方法。而且相對地，這兩個缺點也給予開發者更大的彈性，只要你謹慎使用（同樣地在<a href=\"Simpson\">這篇</a>，Simpson 簡單示範了重新宣告作為一種註解的功用，雖然我不怎麼喜歡）。</p>\n<h2 id=\"什麼時候要用-const？\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%99%82%E5%80%99%E8%A6%81%E7%94%A8-const%EF%BC%9F\" aria-label=\"什麼時候要用 const？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼時候要用 <code class=\"language-text\">const</code>？</h2>\n<p>你可能會發現，在上面範例中，即使我是在區塊內宣告不會再被賦值的變數，我也是用 <code class=\"language-text\">let</code>。為什麼不用 <code class=\"language-text\">const</code>？這樣語義上不是更清晰嗎？</p>\n<p>好吧，其實我也是傾向用 <code class=\"language-text\">const</code>，但因為我介紹的是 Simpson 的論點，所以在宣告變數的寫法上就把他對 <code class=\"language-text\">const</code> 的意見也一併納入。</p>\n<p>Simpson 認為，<code class=\"language-text\">const</code> 是一個有點讓人困惑的關鍵字：你不是說這個變數是常數（constant）嗎？那為什麼它又可以被修改（mutate）呢？這個誤解的確常在 JS 新手身上發生（至少我在公司面試前端時是如此）。</p>\n<p>那該在什麼時候用 <code class=\"language-text\">const</code> 呢？只有當你宣告的變數已經是個不可變（immutable）的值（即基本型別值，詳情可見<a href=\"https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch6.md/#primitive-immutability\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇</a>），而且它在語義上顯然是個常數時，才會用 <code class=\"language-text\">const</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_PAGE_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次要從資料庫取得的文章數量</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DEGREE_TO_PI</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">DEFAULT_THEME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'dark'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 其內容之後能被修改，不建議用 `const`</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SHARE_LINK_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'fb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那重新賦值的問題呢？如同上一節所說，這個錯誤很難出現，即使出現也很好察覺並修復。而且當你會用 <code class=\"language-text\">{..}</code> 把區塊變數包起來，這個代碼塊通常不會太長，在這短短的十幾行中要出錯實在是不太可能。</p>\n<p>以上是 Simpson 的論點。對我來說，我認同重新賦值的問題並不大，但考量到非 JS 新手應該都能明白 <code class=\"language-text\">const</code> 的「不變」意指為何，我還是會繼續照一般規範走，只是要稍微忍受當看到一個由 <code class=\"language-text\">const</code> 宣告的變數，其內容在之後被修改時所引發的不適感。</p>\n<h2 id=\"總結：如何決定變數宣告關鍵字\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90%EF%BC%9A%E5%A6%82%E4%BD%95%E6%B1%BA%E5%AE%9A%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A%E9%97%9C%E9%8D%B5%E5%AD%97\" aria-label=\"總結：如何決定變數宣告關鍵字 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結：如何決定變數宣告關鍵字</h2>\n<p>當我在與別人協作時，我會採用由團隊討論出來的代碼規範，或直接引入主流規範（如 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb</a> 或 <a href=\"https://standardjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Standard</a>）。畢竟，我喜愛的宣告方式，它的好處還無法勝過降低團隊溝通成本所帶來的優勢。但我仍會在程式碼中盡可能地用 <code class=\"language-text\">{..}</code> 縮小變數的作用域。</p>\n<p>如果是我獨立開發的專案，當我碰到要宣告變數時，會問自己兩個問題。第一個：</p>\n<blockquote>\n<p> 這是整個函數內都會使用到的變數嗎？</p>\n</blockquote>\n<p>是，就用 <code class=\"language-text\">var</code> 宣告在函數最上面；不是，遵循最小暴露原則，先用 <code class=\"language-text\">{..}</code> 括起，再問：</p>\n<blockquote>\n<p>這個變數會被重新賦值嗎？</p>\n</blockquote>\n<p>會，就用 <code class=\"language-text\">let</code>；不會，就用 <code class=\"language-text\">const</code>。</p>\n<p>整個決策過程並不複雜，至少我最近在開發瀏覽器擴充套件 <a href=\"https://github.com/yeefun/notion-mark-manager\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Notion+ 標記管理器</a>，是使用得挺愉快的，除了程式碼變得更易讀，修改起來也較容易。</p>\n<p>你是怎麼決定該用哪個關鍵字宣告變數的呢？你對我上面所說的一切，有什麼看法？歡迎留言給我！</p>\n<h2 id=\"相關資料\" style=\"position:relative;\"><a href=\"#%E7%9B%B8%E9%97%9C%E8%B3%87%E6%96%99\" aria-label=\"相關資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相關資料</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">You Don't Know JS Yet: Scope &#x26; Closures (2nd Edition)</a></p>\n<ul>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch6.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chapter 6: Limiting Scope Exposure</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/apA.md#the-case-for-var\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Appendix A: Exploring Further - The Case for <code class=\"language-text\">var</code></a></li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#var-%E5%BE%88%E6%9C%89%E7%94%A8\"><code class=\"language-text\">var</code> 很有用</a></li>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#%E6%9C%80%E5%B0%8F%E6%9A%B4%E9%9C%B2%E5%8E%9F%E5%89%87\">最小暴露原則</a></li>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#%E5%8F%96%E6%8D%A8%EF%BC%9A%E8%A9%95%E4%BC%B0-var-%E7%9A%84%E7%BC%BA%E9%BB%9E\">取捨：評估 <code class=\"language-text\">var</code> 的缺點</a></li>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#%E4%BB%80%E9%BA%BC%E6%99%82%E5%80%99%E8%A6%81%E7%94%A8-const%EF%BC%9F\">什麼時候要用 <code class=\"language-text\">const</code>？</a></li>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#%E7%B8%BD%E7%B5%90%EF%BC%9A%E5%A6%82%E4%BD%95%E6%B1%BA%E5%AE%9A%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A%E9%97%9C%E9%8D%B5%E5%AD%97\">總結：如何決定變數宣告關鍵字</a></li>\n<li><a href=\"/how-to-determine-the-variable-declaration-keyword/#%E7%9B%B8%E9%97%9C%E8%B3%87%E6%96%99\">相關資料</a></li>\n</ul>","fields":{"slug":"/how-to-determine-the-variable-declaration-keyword/"},"frontmatter":{"title":"no-var？決定變數宣告關鍵字的方法","description":"搭配 let，遵守最小暴露原則，var 其實很有用。","featuredImage":null,"date":"2020-10-10","tags":["js","variable","scope"],"update":"0001-01-01"}}},"pageContext":{"slug":"/how-to-determine-the-variable-declaration-keyword/","series":[],"lastmod":"2020-10-10"}},"staticQueryHashes":["2326376460"]}